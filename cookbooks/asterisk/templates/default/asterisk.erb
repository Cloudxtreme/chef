#!/bin/bash
# first of all, lets define the monit stuff

MONIT=/usr/local/monit/bin/monit
MONITRC=/etc/monitrc
# we want to be sure that the config file is OK
chown root:root $MONITRC
chmod 0700 $MONITRC

#
#     taken from asterisk 1.2.6
#
# $Id: asterisk,v 1.3 2005/11/17 22:30:01 Gregory Boehnlein <damin@nacs.net>
#
# asterisk    Starts, Stops and Reloads Asterisk.
#
# chkconfig: 345 40 60
# description: Asterisk PBX and telephony daemon.
# processname: asterisk
# pidfile: /var/run/asterisk.pid
#
# Thu Nov 17 2005 Gregory Boehnlein <damin@nacs.net>
# - Updated Version to 1.3
# - Reversed behavior of LD_ASSUME_KERNEL=2.4.1
# - Added detailed failure messages
#
# Sun Jul 18 2004 Gregory Boehnlein <damin@nacs.net>
# - Updated Version to 1.2
# - Added test for safe_asterisk
# - Verified SIGTERM issued by "killproc" ensures "stop gracefully"
# - Added support for -U and -G command line options
# - Modified "reload" to call asterisk -rx 'reload'

# Use this option to specify a different configuration directory
#AST_CONFIG=/usr/local/asterisk/etc/asterisk

# Installation directory
AST_SBIN=/usr/local/asterisk/sbin

# Uncomment the following and set them to the user/groups that you
# want to run Asterisk as. NOTE: this requires substantial work to
# be sure that Asterisk's environment has permission to write the
# files required  for  its  operation, including logs, its comm
# socket, the asterisk database, etc.
#AST_USER="asterisk"   # der naechste der diese auskommentiert
#AST_GROUP="asterisk"  # wird um einen kopf kuerzer!!!

# Source function library.
. /etc/rc.d/init.d/functions

if ! [ -x $AST_SBIN/asterisk ] ; then
        echo "ERROR: $AST_SBIN/asterisk not found"
        exit 0
fi

if ! [ -d $AST_CONFIG ] ; then
        echo "ERROR: $AST_CONFIG directory not found"
        exit 0
fi

# Uncomment this ONLY if you know what you are doing.

##rt LD_ASSUME_KERNEL=2.4.1

# Full path to asterisk binary
DAEMON=$AST_SBIN/asterisk
AST_BIN=$DAEMON

# Full path to safe_asterisk script
SAFE_ASTERISK=$AST_SBIN/safe_asterisk

# Allow configuration overrides in /etc/sysconfig/asterisk
CONFIG0=`readlink $0`
if [ "$CONFIG0" = "" ]; then
        CONFIGFILE=/etc/sysconfig/`basename $0`
else
        CONFIGFILE=/etc/sysconfig/`basename $CONFIG0`
fi
[ -x $CONFIGFILE ] && . $CONFIGFILE

RETVAL=0

############################################################################################
start() {
        ###adjust file/directory permissions on each startup
                
        echo "Initiating Start of Asterisk: "

        echo -n "Adjusting file/directory permissions:                         "
        #. /etc/rc.d/init.d/asterisk-setpermissions && echo "OK" || echo "FAILED"

        echo -n "Setting ulimits:                                              "
        ulimit -n 32768 -c unlimited && echo "OK" || echo "FAILED"

        # Start daemons.
        echo -n $"Starting asterisk: "
#       if [ -f $SAFE_ASTERISK ] ; then
#               DAEMON=$SAFE_ASTERISK
#       fi
#        if [ $AST_USER ] ; then
#                ASTARGS="-U $AST_USER"
#        fi
#       if [ $AST_GROUP ] ; then
#               ASTARGS="$ASTARGS -G $AST_GROUP"
#       fi
#        if [ $AST_CONFIG ]; then
#                ASTARGS="$ASTARGS -C $AST_CONFIG"
#        fi
        ### here we go!
#        daemon $DAEMON $ASTARGS
        daemon $DAEMON $ASTARGS
        RETVAL=$?
        [ $RETVAL -eq 0 ] && touch /var/lock/subsys/asterisk
        echo
        return $RETVAL
}
#############################################################################################
stop() {
        # Stop daemons.
        echo "Shutting down Asterisk: "

        # this is the nice way to stop asterisk ... initiate the shutdown from itself
        # deactivated because its suspected to disturb the logger .... 6.6.07
 #       if  [ ! "`pgrep asterisk`" ]; then echo "already stopped!"; exit 0; fi
 #       for ast_stop_cmd in "stop when convenient" "stop gracefully" "stop now"; do
 #               if [ ! "`pgrep asterisk`" ]; then
 #                       break                   # when theres no process skip the addtional ast-stop
 #               else                            # otherwise send asterisk the stop commands
 #                       echo -n "executing command: $ast_stop_cmd "
 #                       for each in `seq 1 3`; do
 #                               $AST_BIN -rx "$ast_stop_cmd" > /dev/null 2>&1
 #                               echo -n "."
 #                               sleep 0.5
 #                               if [ ! "`pgrep asterisk`" ]; then echo -n " stopped"; break; fi
 #                       done
 #                       echo
 #               fi
 #       done

        killproc $AST_BIN
        skill $AST_BIN
        echo -n "Asterisk shutdown: "
        if  [ ! "`pgrep asterisk`" ]; then
                                echo "successfully stopped"
                        else
                                echo "FAIL!"
                                fi
        echo
        return $RETVAL
}

#############################################################################################
reload() {
	echo -n "send '$reload_string' to asterisk: "
        $AST_BIN -rnx 'reload' > /dev/null 2>&1 ; RET=$?
        if [ "$RET" == "0" ] ; then
                        echo "OK"
                else
                        echo "FAILED!"
                        RETVAL=1
                        fi
	return $RETVAL
}

#############################################################################################
status() {
        RETVAL=0
        echo -n "Checking Version:   $AST_BIN: "
        $AST_BIN -V
        echo -n "Checking PID-file:  "
        if [ -e /var/run/asterisk.pid ]; then
                        echo "OK - `cat /var/run/asterisk.pid`"
                else
                        echo "FAILED! /var/run/asterisk.pid does not exist"
                        RETVAL=1
                        fi
        echo -n "Checking Process:   "
        PIDS=`pidof $AST_BIN`
        if [ "$PIDS" != "" ]; then
                        echo -n "OK -"; for each in $PIDS; do echo -n " $each"; done; echo
                else
                        echo "FAILED! no process named asterisk found"
                        RETVAL=1
                        fi
        echo -n "Checking Console:   "
        $AST_BIN -rnx 'show warranty' > /dev/null 2>&1 ; RET=$? 
        if [ "$RET" == "0" ] ; then
                        echo "OK"
                else
                        echo "FAILED!"
                        RETVAL=1
                        fi
        $AST_BIN -rnx 'core show uptime' 2>&1 | strings | grep uptime
        $AST_BIN -rnx 'core show channels' 2>&1 | strings | grep active
        return $RETVAL
}

#############################################################################################
monit_start() {
        echo -n "Start Asterisk through monit... "
        $MONIT -c $MONITRC start asterisk
        RETVAL=$?
        if [ "$RETVAL" == "0" ] ; then
                        echo "success"
                else
                        echo "FAILED!"
                        fi
        for each in `seq 1 10`; do sleep 0.5; echo -n "."; done; echo
        echo -n "decrease the verbosity level to zero:                         "
        $DAEMON -rx 'set verbose 0' > /dev/null &2>1 && echo "OK" || echo "FAILED"
        status
}

#############################################################################################
monit_stop() {
        echo -n "Stop Asterisk through monit... "
        $MONIT -c $MONITRC stop asterisk
        RETVAL=$?
        if [ "$RETVAL" == "0" ] ; then
                        echo "success"
                else
                        echo "FAILED!"
                        fi
        for each in `seq 1 10`; do sleep 0.5; echo -n "."; done; echo
        status
}

#############################################################################################

# See how we were called.

case "$1" in
  monitstart)
        monit_start
        ;;
  monitstop)
        monit_stop
        ;;
  start)
        start | logger -t asteriskrc
        ;;
  stop)
        stop | logger -t asteriskrc
        ;;
  restart)
        $0 stop
        echo -n "waiting 5 seconds before start "
        for each in `seq 1 10`; do sleep 0.5; echo -n "."; done; echo
        echo
        $0 start
        ;;
  reload)
	reload_string="reload $2"
        reload
        ;;
  condrestart)
        [ -f /var/lock/subsys/asterisk ] && restart || :
        ;;
  status)
        status 
        ;;
  *)
        echo "Usage: $0 {start|stop|restart|reload|condrestart|status}

monitstart	starts asterisk through monit
monitstop	stops asterisk through monit
start		starts asterisk direct (thats what monit does)
stop		stops asterisk direct (thats what monit does)
restart		stop, wait 5sec, start
reload		send 'reload' to asterisk. can be combined with subsystem (e.g. reload moh)
condrestart	restarts only if asterisk was running before
status		gives a status overview
"
        exit 1
esac

exit $RETVAL

